# -*- coding: utf-8 -*-
"""Monthly_CSV_Creator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w6g3Ji4hVgK3rJDz5b4UBOGX1mqK65Gt
"""

import pandas as pd
import time

import os
import tarfile

import json

#Set initial directory as the directory where the script is running.

initial_directory = '.'
os.chdir(initial_directory)
print("Current working directory is", os.getcwd())

# Select directories

directory_prompt_selection = 'none'

while directory_prompt_selection != 'w':
  current_directories = [d for d in os.listdir('.') if os.path.isdir(d)]

  print("Current working directory is", os.getcwd())

  for directory in current_directories:

    print(current_directories.index(directory), directory)

  print("w", "We can use current directory")
  print("c", "Change top level directory")
  print("u", "Navigate up one level.")
  directory_prompt_selection = input("Choose an option:")
  print("\n")
  
  if directory_prompt_selection == 'c':
    directory_prompt_selection = input('Provide either the relative or full path name of the directory')
    os.chdir(directory_prompt_selection)
  elif directory_prompt_selection == 'u':
    os.chdir('../')
  elif directory_prompt_selection == 'w':
    None
  else:
    os.chdir(os.path.join('.', current_directories[int(directory_prompt_selection)]))

print("Current working directory is", os.getcwd())

# Get rid of anything the operating system may add...
files = ([x for x in sorted(filter(os.path.isfile,
                                   os.listdir('.')),
                                   key=os.path.getmtime) if x[-2:] == "xz"])

files

stopwatch_start = time.time()

files_by_month = [x for x in sorted(filter(os.path.isfile,
                                          os.listdir('.')),
                                    key=os.path.getmtime) if x[-2:] == "xz"]

hour = tarfile.open('./' + files_by_month[0])
hour_list = hour.getnames()

minute_json = json.load(hour.extractfile(hour_list[0]))
timestamp = minute_json["last_updated"]
stations = (pd.DataFrame(minute_json['data']['stations'])
                [['station_id', 'num_docks_available']]
                .rename(columns={'num_docks_available':timestamp})
                .astype('int16')
                .set_index('station_id')
                .sort_index()[timestamp])

minute = 1
while minute < len(hour_list):
  try:
    minute_json = json.load(hour.extractfile(hour_list[minute]))
    timestamp = minute_json["last_updated"]
    stations = pd.concat([stations, 
                        (pd.DataFrame(minute_json['data']['stations'])
                          [['station_id', 'num_docks_available']]
                          .rename(columns={'num_docks_available':timestamp})
                          .astype('int16')
                          .set_index('station_id')
                          .sort_index()[timestamp])],
                        join='outer',
                        axis=1)
    
    minute+=1
  except json.JSONDecodeError:
    minute+=1
        

for hour_xz in files_by_month[1:]:
  hour = tarfile.open('./' + hour_xz)
  hour_list = hour.getnames()

  minute=0
  while minute < len(hour_list):
    try:
      minute_json = json.load(hour.extractfile(hour_list[minute]))
      timestamp = minute_json["last_updated"]
      stations = pd.concat([stations, 
                        (pd.DataFrame(minute_json['data']['stations'])
                          [['station_id', 'num_docks_available']]
                          .rename(columns={'num_docks_available':timestamp})
                          .astype('int16')
                          .set_index('station_id')
                          .sort_index()[timestamp])],
                        join='outer',
                        axis=1)
      minute+=1
    except json.JSONDecodeError:
      minute+=1

stopwatch_end = time.time()
print(stopwatch_end - stopwatch_start)

stations.to_csv(('./' + os.getcwd().split('/')[-1] + 'csv.gzip'))

save_test = pd.read_csv(('./' + os.getcwd().split('/')[-1] + 'csv.gzip'))

print(save_test.head())